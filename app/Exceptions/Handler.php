<?php

namespace App\Exceptions;

use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Validation\ValidationException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {

        });
    }

    public function render($request, Throwable $e)
    {
//        dd($e);
        if ($request->wantsJson()) {

            //check validation type errors
            if ($e instanceof ValidationException) {
                return $this->getRenderValodationException($request, $e);
            }

            //check Authentication type errors
            if ($e instanceof AuthenticationException) {
                return $this->getRenderAuthenticationException($request, $e);
            }

            return $this->renderOtherException($e);

        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    /**
     * @return mixed
     */
    private function getRenderValodationException($request, Throwable $e)
    {
        return response([
            'errors' => $e->errors()
        ], 422);
    }

    /**
     * @param $e
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\Routing\ResponseFactory|\Illuminate\Http\Response
     */
    private function renderOtherException($e)
    {
        $e = $this->prepareException($e);
        $code = method_exists($e, 'getStatusCode') ? $e->getStatusCode() : 500;

        $massage = 'خطایی در سرور رخ داده است';
        if (!($code == 500 || empty($e->getMessage()))) {
            $massage = $e->getMessage();
        }
        return response([
            'massage' => $massage
        ], $code);
    }

    private function getRenderAuthenticationException(\Illuminate\Http\Request $request, AuthenticationException $e)
    {
        return response([
            'errors' => 'شما به این بخش دسترسی ندارید'
        ], 401);
    }
}
